#!/usr/bin/env bash
#
# ayy lmao
#

_BASHPLATE_DIR="$HOME/.local/share/bashplate"
source "$_BASHPLATE_DIR/bashplate.sh"

mount_dir="/mnt-set/mp3-sd"

lyrics_from="$HOME/.config/mpd/lyrics"
lyrics_to="lyrics"

ERR_DEVICE=2

_VERBOSE=1

_usage="\
Usage: $_FILENAME [options] [FILE]
Copy lyrics to my MP3 player.

  Options:
    -v, --verbose   be verbose
    -h, --help      display this help text and exit\
"

## Mount/umount functions {{{
# Try to mount device.
mount_device() {
    _log "trying to mount ${mount_dir}..."
    mount "$mount_dir"

    # tell how it went
    if [[ $? == 0 ]]; then
        _log "mounted succesfully"
    else
        _err "could not mount directory ${mount_dir}: is the device plugged in?" $ERR_DEVICE
    fi
}

# Try to unmount device.
umount_device() {
    umount "$mount_dir"

    # tell how it went
    if [[ $? == 0 ]]; then
        _log "unmounted successfully"
    else
        _err "could not unmount directory $mount_dir" $ERR_DEVICE
    fi
}
## }}}

tmp_dir="/tmp/rockbox-lyrics-$(date +%s)"
mkdir "$tmp_dir"

# copy lyrics to temp dir
cp -r "$lyrics_from"/* "$tmp_dir"

# remove extension (easier to use files later)
for file in "$tmp_dir"/*; do
    mv "${file}" "${file%.*}"
done

# make files LRC-compatible
#./rocklyrics.py "$tmp_dir"/*

mount_device

for file in $tmp_dir/*; do
    song="${file##*/}"

    artist="$(awk -F " - " '{print $1}' <<< "$song")"
    title="$(awk -F " - " '{print $2}' <<< "$song")"

    mv "$file" "$tmp_dir/${title}.txt"

    #match="$(mpc search artist "$artist" title "$title" | head -n1)"
    #if [[ "$match" ]]; then
    #    # copy to matching file + .txt
    #    cp "$file" "$mount/music/${match%.*}.txt"
    #fi
done

rm -rf "$mount/$lyrics_to"/*
rsync -av --modify-window=10 "$tmp_dir"/* "$mount/$lyrics_to"

umount_device

rm -r "$tmp_dir"
