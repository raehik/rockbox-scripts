#!/usr/bin/env bash
#
# Retrieve, process & submit a Rockbox Last.fm scrobble log.
#
# Note: Last.fm will only accept a log if at least 1 song was fully
#       listened to (L). It does not record skipped (S) songs.
#

_BASHPLATE_DIR="$HOME/.local/share/bashplate"
source "$_BASHPLATE_DIR/bashplate.sh"

device="/dev/disk/by-label/CLIPP-8G-1"
mount_dir="/mnt/mp3"
archive_filename="$HOME/media/music-etc/mp3-scrobbles/$(date +%F-%T)-scrobbler-log.txt"
log_name=".scrobbler.log"

ERR_ARGS=1
ERR_DEVICE=2
ERR_SCROBBLER=3

# verbosity on by default
_VERBOSE=1

# Print usage and exit depending on given exit code.
_usage="\
Usage: $_FILENAME [options] [FILE]
Retrieve and submit a Rockbox scrobbler log to Last.fm.

With no arguments, tries to mount a preset device UUID (check the file) and look
for a scrobble log. If present, the log is archived and submitted. If FILE is
provided (can be any filename, not just .scrobbler.log), try to submit it and
leave it in place.

  Options:
    -e, --edit      edit the scrobble log before submitting
    -v, --verbose   be verbose
    -h, --help      display this help text and exit\
"

# Try to mount device.
mount_device() {
    sudo mount "$device" "$mount_dir" -o uid=$(id -u),gid=$(id -g),utf8

    # tell how it went
    if [[ $? == 0 ]]; then
        _log "mounted succesfully"
    else
        _err "could not mount device $device at mount point $mount_dir" $ERR_DEVICE
    fi
}

# Try to unmount device.
umount_device() {
    sudo umount "$device"

    # tell how it went
    if [[ $? == 0 ]]; then
        _log "unmounted successfully"
    else
        _err "could not unmount $device" $ERR_DEVICE
    fi
}

submit_log() {
    # copy log to a temporary file with specific scrobble log name
    # we don't need to preserve the timestamp because we already moved
    # the log directly rather than copying & removing
    local log_dir=$(mktemp -d)
    local tmp_log="$log_dir/$log_name"
    cp "$1" "$tmp_log"

    # view (& edit) the log (e.g. to delete entries of podcasts)
    # not really sure if it's useful
    #vim "$tmp_log"

    # submit using qtscrob
    qtscrob-cli --file --location "$log_dir"

    # check exit status
    if [[ $? != 0 ]]; then
        _err "qtscrob-cli failed, exiting" $ERR_SCROBBLER
    fi
}

archive_device_log() {
    mount_device

    local device_log="$mount_dir/$log_name"

    # if no log found, exit early
    if [[ ! -f "$device_log" ]]; then
        _log "no scrobbler log present"
        umount_device
        exit 0
    fi

    # archive & remove exec. bit
    mv "$device_log" "$archive_filename"
    chmod -x "$archive_filename"

    _log "log moved from device -> $archive_filename"

    umount_device
}

edit_log() {
    _log "opening log in editor..."
    $file_editor "$1"
}

while getopts_long :vhe opt \
    verbose 0 \
    help 0 \
    edit 0 \
    "" "$@"
do
    case "$opt" in
        v|verbose) _VERBOSE=$(($_VERBOSE+1)) ;;
        h|help) _print_usage 0 ;;
		:) _err "$OPTLERR" ; _print_usage 1 ;;

        e|edit) edit_log=true ;;
    esac
done
shift $((OPTLIND-1))

# set editor to $EDITOR or vim if not present
file_editor="$EDITOR"
[[ -z "$file_editor" ]] && file_editor="vim"

# check argument count
if [[ $# > 1 ]]; then
    _err "expected 0 or 1 arguments (got $#)" $ERR_ARGS
fi

# if given an argument, submit it
if [[ $# == 1 ]]; then
    # been given a file: don't mount, look for a log in it
	if [[ ! -f "$1" ]]; then
        _err "not a file: $1" $ERR_ARGS
	fi
    _log "using file as scrobbler log (not mounting)"
    [[ $edit_log ]] && edit_log "$1"
    submit_log "$1"
    exit 0
fi

# else try to mount & submit
if [[ ! -L "$device" ]]; then
    _err "device not present" $ERR_DEVICE
fi

_log "device found, mounting..."
archive_device_log
[[ $edit_log ]] && edit_log "$archive_filename"
submit_log "$archive_filename"
